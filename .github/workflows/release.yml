name: Release on PyPI

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    name: "${{ matrix.build }} ${{ matrix.os }} ${{ matrix.arch }}"
    runs-on: "${{ matrix.os }}"
    strategy:
      matrix:
        os: ["ubuntu-latest", "macos-10.15"]
        arch: ["x86_64"]
        build: ["cp37-*", "cp38-*", "cp39-*", "cp310-*", "cp311-*", "pp37-*", "pp38-*", "pp39-*"]
        include:
          - arch: "aarch64"
            os: "ubuntu-latest"
            build: "cp37-manylinux*"
          - arch: "aarch64"
            os: "ubuntu-latest"
            build: "cp38-manylinux*"
          - arch: "aarch64"
            os: "ubuntu-latest"
            build: "cp39-manylinux*"
          - arch: "aarch64"
            os: "ubuntu-latest"
            build: "cp310-manylinux*"
          - arch: "aarch64"
            os: "ubuntu-latest"
            build: "cp311-manylinux*"
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Set up QEMU
        if: matrix.arch == 'aarch64'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all
      - run: python -m pip install -U pip
      - run: python -m pip install cibuildwheel
      - run: touch setup.py
      - run: python -m cibuildwheel --output-dir wh
        env:
          CIBW_BUILD: ${{ matrix.build }}
          CIBW_ARCHS: ${{ matrix.arch }}
          CIBW_MANYLINUX_X86_64_IMAGE: "quay.io/pypa/manylinux2014_x86_64"
          CIBW_MANYLINUX_PYPY_X86_64_IMAGE: "quay.io/pypa/manylinux2014_x86_64"
          CIBW_MANYLINUX_AARCH64_IMAGE: "quay.io/pypa/manylinux_2_28_aarch64"
          CIBW_REPAIR_WHEEL_COMMAND: ""
          CIBW_ENVIRONMENT: CMEEL_LOG_LEVEL="DEBUG"
      - uses: actions/upload-artifact@v3
        with:
          path: wh

  release:
    needs: ["build"]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - uses: actions/download-artifact@v3
      - run: python -m pip install twine
      - run: python -m twine upload -u __token__ -p "${{ secrets.PYPI_TOKEN }}" artifact/tsid*.whl
